//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RompecabezasFei.ServicioRompecabezasFei {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CuentaJugador", Namespace="http://schemas.datacontract.org/2004/07/Logica")]
    [System.SerializableAttribute()]
    public partial class CuentaJugador : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContrasenaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CorreoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EsInvitadoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RompecabezasFei.ServicioRompecabezasFei.EstadoJugador EstadoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdJugadorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NombreJugadorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumeroAvatarField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PuntajeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contrasena {
            get {
                return this.ContrasenaField;
            }
            set {
                if ((object.ReferenceEquals(this.ContrasenaField, value) != true)) {
                    this.ContrasenaField = value;
                    this.RaisePropertyChanged("Contrasena");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Correo {
            get {
                return this.CorreoField;
            }
            set {
                if ((object.ReferenceEquals(this.CorreoField, value) != true)) {
                    this.CorreoField = value;
                    this.RaisePropertyChanged("Correo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EsInvitado {
            get {
                return this.EsInvitadoField;
            }
            set {
                if ((this.EsInvitadoField.Equals(value) != true)) {
                    this.EsInvitadoField = value;
                    this.RaisePropertyChanged("EsInvitado");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RompecabezasFei.ServicioRompecabezasFei.EstadoJugador Estado {
            get {
                return this.EstadoField;
            }
            set {
                if ((this.EstadoField.Equals(value) != true)) {
                    this.EstadoField = value;
                    this.RaisePropertyChanged("Estado");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdJugador {
            get {
                return this.IdJugadorField;
            }
            set {
                if ((this.IdJugadorField.Equals(value) != true)) {
                    this.IdJugadorField = value;
                    this.RaisePropertyChanged("IdJugador");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NombreJugador {
            get {
                return this.NombreJugadorField;
            }
            set {
                if ((object.ReferenceEquals(this.NombreJugadorField, value) != true)) {
                    this.NombreJugadorField = value;
                    this.RaisePropertyChanged("NombreJugador");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumeroAvatar {
            get {
                return this.NumeroAvatarField;
            }
            set {
                if ((this.NumeroAvatarField.Equals(value) != true)) {
                    this.NumeroAvatarField = value;
                    this.RaisePropertyChanged("NumeroAvatar");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Puntaje {
            get {
                return this.PuntajeField;
            }
            set {
                if ((this.PuntajeField.Equals(value) != true)) {
                    this.PuntajeField = value;
                    this.RaisePropertyChanged("Puntaje");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EstadoJugador", Namespace="http://schemas.datacontract.org/2004/07/Logica.Enumeraciones")]
    public enum EstadoJugador : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Desconectado = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Conectado = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disponible = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EnSala = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EnPartida = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DificultadPartida", Namespace="http://schemas.datacontract.org/2004/07/Datos")]
    public enum DificultadPartida : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Facil = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Medio = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dificil = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Posicion", Namespace="http://schemas.datacontract.org/2004/07/Logica")]
    [System.SerializableAttribute()]
    public partial class Posicion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tablero", Namespace="http://schemas.datacontract.org/2004/07/Logica")]
    [System.SerializableAttribute()]
    public partial class Tablero : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumeroImagenRompecabezasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalColumnasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalFilasField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumeroImagenRompecabezas {
            get {
                return this.NumeroImagenRompecabezasField;
            }
            set {
                if ((this.NumeroImagenRompecabezasField.Equals(value) != true)) {
                    this.NumeroImagenRompecabezasField = value;
                    this.RaisePropertyChanged("NumeroImagenRompecabezas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalColumnas {
            get {
                return this.TotalColumnasField;
            }
            set {
                if ((this.TotalColumnasField.Equals(value) != true)) {
                    this.TotalColumnasField = value;
                    this.RaisePropertyChanged("TotalColumnas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalFilas {
            get {
                return this.TotalFilasField;
            }
            set {
                if ((this.TotalFilasField.Equals(value) != true)) {
                    this.TotalFilasField = value;
                    this.RaisePropertyChanged("TotalFilas");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioAmistades", CallbackContract=typeof(RompecabezasFei.ServicioRompecabezasFei.IServicioAmistadesCallback))]
    public interface IServicioAmistades {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ObtenerJugadoresConSolicitudPendiente", ReplyAction="http://tempuri.org/IServicioAmistades/ObtenerJugadoresConSolicitudPendienteRespon" +
            "se")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerJugadoresConSolicitudPendiente(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ObtenerJugadoresConSolicitudPendiente", ReplyAction="http://tempuri.org/IServicioAmistades/ObtenerJugadoresConSolicitudPendienteRespon" +
            "se")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerJugadoresConSolicitudPendienteAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ObtenerAmigosDeJugador", ReplyAction="http://tempuri.org/IServicioAmistades/ObtenerAmigosDeJugadorResponse")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerAmigosDeJugador(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ObtenerAmigosDeJugador", ReplyAction="http://tempuri.org/IServicioAmistades/ObtenerAmigosDeJugadorResponse")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerAmigosDeJugadorAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/EnviarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/EnviarSolicitudDeAmistadResponse")]
        bool EnviarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/EnviarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/EnviarSolicitudDeAmistadResponse")]
        System.Threading.Tasks.Task<bool> EnviarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/AceptarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/AceptarSolicitudDeAmistadResponse")]
        bool AceptarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/AceptarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/AceptarSolicitudDeAmistadResponse")]
        System.Threading.Tasks.Task<bool> AceptarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/RechazarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/RechazarSolicitudDeAmistadResponse")]
        bool RechazarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/RechazarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/RechazarSolicitudDeAmistadResponse")]
        System.Threading.Tasks.Task<bool> RechazarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ExisteSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/ExisteSolicitudDeAmistadResponse")]
        bool ExisteSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ExisteSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/ExisteSolicitudDeAmistadResponse")]
        System.Threading.Tasks.Task<bool> ExisteSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ExisteAmistadConJugador", ReplyAction="http://tempuri.org/IServicioAmistades/ExisteAmistadConJugadorResponse")]
        bool ExisteAmistadConJugador(string nombreJugadorA, string nombreJugadorB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ExisteAmistadConJugador", ReplyAction="http://tempuri.org/IServicioAmistades/ExisteAmistadConJugadorResponse")]
        System.Threading.Tasks.Task<bool> ExisteAmistadConJugadorAsync(string nombreJugadorA, string nombreJugadorB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/EliminarAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/EliminarAmistadResponse")]
        bool EliminarAmistad(string nombreJugadorA, string nombreJugadorB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/EliminarAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/EliminarAmistadResponse")]
        System.Threading.Tasks.Task<bool> EliminarAmistadAsync(string nombreJugadorA, string nombreJugadorB);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/ActivarNotificacionesDeAmistades")]
        void ActivarNotificacionesDeAmistades(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/ActivarNotificacionesDeAmistades")]
        System.Threading.Tasks.Task ActivarNotificacionesDeAmistadesAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/DesactivarNotificacionesDeAmistades")]
        void DesactivarNotificacionesDeAmistades(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/DesactivarNotificacionesDeAmistades")]
        System.Threading.Tasks.Task DesactivarNotificacionesDeAmistadesAsync(string nombreJugador);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioAmistadesCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/MostrarSolicitudDeAmistadRecibida")]
        void MostrarSolicitudDeAmistadRecibida(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaNuevaSolicitud);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/AgregarAmigoAListaDeAmigos")]
        void AgregarAmigoAListaDeAmigos(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaNuevoAmigo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/RemoverAmigoDeListaDeAmigos")]
        void RemoverAmigoDeListaDeAmigos(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/ActualizarEstadoDeJugador")]
        void ActualizarEstadoDeJugador(string nombreJugador, RompecabezasFei.ServicioRompecabezasFei.EstadoJugador estado);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioAmistadesChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioAmistades, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioAmistadesClient : System.ServiceModel.DuplexClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioAmistades>, RompecabezasFei.ServicioRompecabezasFei.IServicioAmistades {
        
        public ServicioAmistadesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServicioAmistadesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServicioAmistadesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioAmistadesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioAmistadesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerJugadoresConSolicitudPendiente(string nombreJugador) {
            return base.Channel.ObtenerJugadoresConSolicitudPendiente(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerJugadoresConSolicitudPendienteAsync(string nombreJugador) {
            return base.Channel.ObtenerJugadoresConSolicitudPendienteAsync(nombreJugador);
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerAmigosDeJugador(string nombreJugador) {
            return base.Channel.ObtenerAmigosDeJugador(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerAmigosDeJugadorAsync(string nombreJugador) {
            return base.Channel.ObtenerAmigosDeJugadorAsync(nombreJugador);
        }
        
        public bool EnviarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.EnviarSolicitudDeAmistad(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public System.Threading.Tasks.Task<bool> EnviarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.EnviarSolicitudDeAmistadAsync(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public bool AceptarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.AceptarSolicitudDeAmistad(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public System.Threading.Tasks.Task<bool> AceptarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.AceptarSolicitudDeAmistadAsync(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public bool RechazarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.RechazarSolicitudDeAmistad(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public System.Threading.Tasks.Task<bool> RechazarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.RechazarSolicitudDeAmistadAsync(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public bool ExisteSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.ExisteSolicitudDeAmistad(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.ExisteSolicitudDeAmistadAsync(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public bool ExisteAmistadConJugador(string nombreJugadorA, string nombreJugadorB) {
            return base.Channel.ExisteAmistadConJugador(nombreJugadorA, nombreJugadorB);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteAmistadConJugadorAsync(string nombreJugadorA, string nombreJugadorB) {
            return base.Channel.ExisteAmistadConJugadorAsync(nombreJugadorA, nombreJugadorB);
        }
        
        public bool EliminarAmistad(string nombreJugadorA, string nombreJugadorB) {
            return base.Channel.EliminarAmistad(nombreJugadorA, nombreJugadorB);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarAmistadAsync(string nombreJugadorA, string nombreJugadorB) {
            return base.Channel.EliminarAmistadAsync(nombreJugadorA, nombreJugadorB);
        }
        
        public void ActivarNotificacionesDeAmistades(string nombreJugador) {
            base.Channel.ActivarNotificacionesDeAmistades(nombreJugador);
        }
        
        public System.Threading.Tasks.Task ActivarNotificacionesDeAmistadesAsync(string nombreJugador) {
            return base.Channel.ActivarNotificacionesDeAmistadesAsync(nombreJugador);
        }
        
        public void DesactivarNotificacionesDeAmistades(string nombreJugador) {
            base.Channel.DesactivarNotificacionesDeAmistades(nombreJugador);
        }
        
        public System.Threading.Tasks.Task DesactivarNotificacionesDeAmistadesAsync(string nombreJugador) {
            return base.Channel.DesactivarNotificacionesDeAmistadesAsync(nombreJugador);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioCorreo")]
    public interface IServicioCorreo {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioCorreo/ExisteCorreoRegistrado", ReplyAction="http://tempuri.org/IServicioCorreo/ExisteCorreoRegistradoResponse")]
        bool ExisteCorreoRegistrado(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioCorreo/ExisteCorreoRegistrado", ReplyAction="http://tempuri.org/IServicioCorreo/ExisteCorreoRegistradoResponse")]
        System.Threading.Tasks.Task<bool> ExisteCorreoRegistradoAsync(string correo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioCorreo/EnviarMensajeACorreo", ReplyAction="http://tempuri.org/IServicioCorreo/EnviarMensajeACorreoResponse")]
        bool EnviarMensajeACorreo(string encabezado, string correo, string asunto, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioCorreo/EnviarMensajeACorreo", ReplyAction="http://tempuri.org/IServicioCorreo/EnviarMensajeACorreoResponse")]
        System.Threading.Tasks.Task<bool> EnviarMensajeACorreoAsync(string encabezado, string correo, string asunto, string mensaje);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioCorreoChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioCorreo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioCorreoClient : System.ServiceModel.ClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioCorreo>, RompecabezasFei.ServicioRompecabezasFei.IServicioCorreo {
        
        public ServicioCorreoClient() {
        }
        
        public ServicioCorreoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicioCorreoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioCorreoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioCorreoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ExisteCorreoRegistrado(string correo) {
            return base.Channel.ExisteCorreoRegistrado(correo);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteCorreoRegistradoAsync(string correo) {
            return base.Channel.ExisteCorreoRegistradoAsync(correo);
        }
        
        public bool EnviarMensajeACorreo(string encabezado, string correo, string asunto, string mensaje) {
            return base.Channel.EnviarMensajeACorreo(encabezado, correo, asunto, mensaje);
        }
        
        public System.Threading.Tasks.Task<bool> EnviarMensajeACorreoAsync(string encabezado, string correo, string asunto, string mensaje) {
            return base.Channel.EnviarMensajeACorreoAsync(encabezado, correo, asunto, mensaje);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioInvitaciones", CallbackContract=typeof(RompecabezasFei.ServicioRompecabezasFei.IServicioInvitacionesCallback))]
    public interface IServicioInvitaciones {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioInvitaciones/ActivarInvitacionesDeSala")]
        void ActivarInvitacionesDeSala(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioInvitaciones/ActivarInvitacionesDeSala")]
        System.Threading.Tasks.Task ActivarInvitacionesDeSalaAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioInvitaciones/DesactivarInvitacionesDeSala")]
        void DesactivarInvitacionesDeSala(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioInvitaciones/DesactivarInvitacionesDeSala")]
        System.Threading.Tasks.Task DesactivarInvitacionesDeSalaAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioInvitaciones/ObtenerAmigosDisponibles", ReplyAction="http://tempuri.org/IServicioInvitaciones/ObtenerAmigosDisponiblesResponse")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerAmigosDisponibles(string nombreAnfitrion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioInvitaciones/ObtenerAmigosDisponibles", ReplyAction="http://tempuri.org/IServicioInvitaciones/ObtenerAmigosDisponiblesResponse")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerAmigosDisponiblesAsync(string nombreAnfitrion);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioInvitacionesCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioInvitaciones/MostrarInvitacionDeSala")]
        void MostrarInvitacionDeSala(string nombreJugador, string codigoSala);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioInvitacionesChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioInvitaciones, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioInvitacionesClient : System.ServiceModel.DuplexClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioInvitaciones>, RompecabezasFei.ServicioRompecabezasFei.IServicioInvitaciones {
        
        public ServicioInvitacionesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServicioInvitacionesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServicioInvitacionesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioInvitacionesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioInvitacionesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ActivarInvitacionesDeSala(string nombreJugador) {
            base.Channel.ActivarInvitacionesDeSala(nombreJugador);
        }
        
        public System.Threading.Tasks.Task ActivarInvitacionesDeSalaAsync(string nombreJugador) {
            return base.Channel.ActivarInvitacionesDeSalaAsync(nombreJugador);
        }
        
        public void DesactivarInvitacionesDeSala(string nombreJugador) {
            base.Channel.DesactivarInvitacionesDeSala(nombreJugador);
        }
        
        public System.Threading.Tasks.Task DesactivarInvitacionesDeSalaAsync(string nombreJugador) {
            return base.Channel.DesactivarInvitacionesDeSalaAsync(nombreJugador);
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerAmigosDisponibles(string nombreAnfitrion) {
            return base.Channel.ObtenerAmigosDisponibles(nombreAnfitrion);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerAmigosDisponiblesAsync(string nombreAnfitrion) {
            return base.Channel.ObtenerAmigosDisponiblesAsync(nombreAnfitrion);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioJugador", CallbackContract=typeof(RompecabezasFei.ServicioRompecabezasFei.IServicioJugadorCallback))]
    public interface IServicioJugador {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/RegistrarJugador", ReplyAction="http://tempuri.org/IServicioJugador/RegistrarJugadorResponse")]
        bool RegistrarJugador(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/RegistrarJugador", ReplyAction="http://tempuri.org/IServicioJugador/RegistrarJugadorResponse")]
        System.Threading.Tasks.Task<bool> RegistrarJugadorAsync(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/IniciarSesionComoJugador", ReplyAction="http://tempuri.org/IServicioJugador/IniciarSesionComoJugadorResponse")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador IniciarSesionComoJugador(string nombreJugador, string contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/IniciarSesionComoJugador", ReplyAction="http://tempuri.org/IServicioJugador/IniciarSesionComoJugadorResponse")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador> IniciarSesionComoJugadorAsync(string nombreJugador, string contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/IniciarSesionComoInvitado", ReplyAction="http://tempuri.org/IServicioJugador/IniciarSesionComoInvitadoResponse")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador IniciarSesionComoInvitado(string nombreInvitado);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/IniciarSesionComoInvitado", ReplyAction="http://tempuri.org/IServicioJugador/IniciarSesionComoInvitadoResponse")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador> IniciarSesionComoInvitadoAsync(string nombreInvitado);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioJugador/CerrarSesion")]
        void CerrarSesion(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioJugador/CerrarSesion")]
        System.Threading.Tasks.Task CerrarSesionAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ActualizarNombreJugador", ReplyAction="http://tempuri.org/IServicioJugador/ActualizarNombreJugadorResponse")]
        bool ActualizarNombreJugador(string nombreAnterior, string nuevoNombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ActualizarNombreJugador", ReplyAction="http://tempuri.org/IServicioJugador/ActualizarNombreJugadorResponse")]
        System.Threading.Tasks.Task<bool> ActualizarNombreJugadorAsync(string nombreAnterior, string nuevoNombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ActualizarNumeroAvatar", ReplyAction="http://tempuri.org/IServicioJugador/ActualizarNumeroAvatarResponse")]
        bool ActualizarNumeroAvatar(string nombreJugador, int nuevoNumeroAvatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ActualizarNumeroAvatar", ReplyAction="http://tempuri.org/IServicioJugador/ActualizarNumeroAvatarResponse")]
        System.Threading.Tasks.Task<bool> ActualizarNumeroAvatarAsync(string nombreJugador, int nuevoNumeroAvatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ActualizarContrasena", ReplyAction="http://tempuri.org/IServicioJugador/ActualizarContrasenaResponse")]
        bool ActualizarContrasena(string correo, string contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ActualizarContrasena", ReplyAction="http://tempuri.org/IServicioJugador/ActualizarContrasenaResponse")]
        System.Threading.Tasks.Task<bool> ActualizarContrasenaAsync(string correo, string contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/EsLaMismaContrasenaDeJugador", ReplyAction="http://tempuri.org/IServicioJugador/EsLaMismaContrasenaDeJugadorResponse")]
        bool EsLaMismaContrasenaDeJugador(string nombreJugador, string contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/EsLaMismaContrasenaDeJugador", ReplyAction="http://tempuri.org/IServicioJugador/EsLaMismaContrasenaDeJugadorResponse")]
        System.Threading.Tasks.Task<bool> EsLaMismaContrasenaDeJugadorAsync(string nombreJugador, string contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ExisteNombreJugadorRegistrado", ReplyAction="http://tempuri.org/IServicioJugador/ExisteNombreJugadorRegistradoResponse")]
        bool ExisteNombreJugadorRegistrado(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ExisteNombreJugadorRegistrado", ReplyAction="http://tempuri.org/IServicioJugador/ExisteNombreJugadorRegistradoResponse")]
        System.Threading.Tasks.Task<bool> ExisteNombreJugadorRegistradoAsync(string nombreJugador);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioJugadorCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioJugador/ProbarConexionJugador")]
        void ProbarConexionJugador();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioJugadorChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioJugador, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioJugadorClient : System.ServiceModel.DuplexClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioJugador>, RompecabezasFei.ServicioRompecabezasFei.IServicioJugador {
        
        public ServicioJugadorClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServicioJugadorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServicioJugadorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioJugadorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioJugadorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool RegistrarJugador(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaJugador) {
            return base.Channel.RegistrarJugador(cuentaJugador);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrarJugadorAsync(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaJugador) {
            return base.Channel.RegistrarJugadorAsync(cuentaJugador);
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador IniciarSesionComoJugador(string nombreJugador, string contrasena) {
            return base.Channel.IniciarSesionComoJugador(nombreJugador, contrasena);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador> IniciarSesionComoJugadorAsync(string nombreJugador, string contrasena) {
            return base.Channel.IniciarSesionComoJugadorAsync(nombreJugador, contrasena);
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador IniciarSesionComoInvitado(string nombreInvitado) {
            return base.Channel.IniciarSesionComoInvitado(nombreInvitado);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador> IniciarSesionComoInvitadoAsync(string nombreInvitado) {
            return base.Channel.IniciarSesionComoInvitadoAsync(nombreInvitado);
        }
        
        public void CerrarSesion(string nombreJugador) {
            base.Channel.CerrarSesion(nombreJugador);
        }
        
        public System.Threading.Tasks.Task CerrarSesionAsync(string nombreJugador) {
            return base.Channel.CerrarSesionAsync(nombreJugador);
        }
        
        public bool ActualizarNombreJugador(string nombreAnterior, string nuevoNombre) {
            return base.Channel.ActualizarNombreJugador(nombreAnterior, nuevoNombre);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarNombreJugadorAsync(string nombreAnterior, string nuevoNombre) {
            return base.Channel.ActualizarNombreJugadorAsync(nombreAnterior, nuevoNombre);
        }
        
        public bool ActualizarNumeroAvatar(string nombreJugador, int nuevoNumeroAvatar) {
            return base.Channel.ActualizarNumeroAvatar(nombreJugador, nuevoNumeroAvatar);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarNumeroAvatarAsync(string nombreJugador, int nuevoNumeroAvatar) {
            return base.Channel.ActualizarNumeroAvatarAsync(nombreJugador, nuevoNumeroAvatar);
        }
        
        public bool ActualizarContrasena(string correo, string contrasena) {
            return base.Channel.ActualizarContrasena(correo, contrasena);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarContrasenaAsync(string correo, string contrasena) {
            return base.Channel.ActualizarContrasenaAsync(correo, contrasena);
        }
        
        public bool EsLaMismaContrasenaDeJugador(string nombreJugador, string contrasena) {
            return base.Channel.EsLaMismaContrasenaDeJugador(nombreJugador, contrasena);
        }
        
        public System.Threading.Tasks.Task<bool> EsLaMismaContrasenaDeJugadorAsync(string nombreJugador, string contrasena) {
            return base.Channel.EsLaMismaContrasenaDeJugadorAsync(nombreJugador, contrasena);
        }
        
        public bool ExisteNombreJugadorRegistrado(string nombreJugador) {
            return base.Channel.ExisteNombreJugadorRegistrado(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteNombreJugadorRegistradoAsync(string nombreJugador) {
            return base.Channel.ExisteNombreJugadorRegistradoAsync(nombreJugador);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioPartida", CallbackContract=typeof(RompecabezasFei.ServicioRompecabezasFei.IServicioPartidaCallback))]
    public interface IServicioPartida {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/CrearNuevaPartida", ReplyAction="http://tempuri.org/IServicioPartida/CrearNuevaPartidaResponse")]
        bool CrearNuevaPartida(string codigoSala, RompecabezasFei.ServicioRompecabezasFei.DificultadPartida dificultad, int numeroImagen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/CrearNuevaPartida", ReplyAction="http://tempuri.org/IServicioPartida/CrearNuevaPartidaResponse")]
        System.Threading.Tasks.Task<bool> CrearNuevaPartidaAsync(string codigoSala, RompecabezasFei.ServicioRompecabezasFei.DificultadPartida dificultad, int numeroImagen);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/UnirseAPartida")]
        void UnirseAPartida(string codigoSala, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/UnirseAPartida")]
        System.Threading.Tasks.Task UnirseAPartidaAsync(string codigoSala, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/AbandonarPartida")]
        void AbandonarPartida(string codigoSala, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/AbandonarPartida")]
        System.Threading.Tasks.Task AbandonarPartidaAsync(string codigoSala, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/CancelarPartida")]
        void CancelarPartida(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/CancelarPartida")]
        System.Threading.Tasks.Task CancelarPartidaAsync(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/IniciarPartida")]
        void IniciarPartida(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/IniciarPartida")]
        System.Threading.Tasks.Task IniciarPartidaAsync(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/BloquearPieza")]
        void BloquearPieza(string codigoSala, int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/BloquearPieza")]
        System.Threading.Tasks.Task BloquearPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/DesbloquearPieza")]
        void DesbloquearPieza(string codigoSala, int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/DesbloquearPieza")]
        System.Threading.Tasks.Task DesbloquearPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/ColocarPieza")]
        void ColocarPieza(string codigoSala, int numeroPieza, string nombreJugador, RompecabezasFei.ServicioRompecabezasFei.Posicion posicion);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/ColocarPieza")]
        System.Threading.Tasks.Task ColocarPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador, RompecabezasFei.ServicioRompecabezasFei.Posicion posicion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ObtenerNumeroDePartidasJugadas", ReplyAction="http://tempuri.org/IServicioPartida/ObtenerNumeroDePartidasJugadasResponse")]
        int ObtenerNumeroDePartidasJugadas(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ObtenerNumeroDePartidasJugadas", ReplyAction="http://tempuri.org/IServicioPartida/ObtenerNumeroDePartidasJugadasResponse")]
        System.Threading.Tasks.Task<int> ObtenerNumeroDePartidasJugadasAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ObtenerNumeroDePartidasGanadas", ReplyAction="http://tempuri.org/IServicioPartida/ObtenerNumeroDePartidasGanadasResponse")]
        int ObtenerNumeroDePartidasGanadas(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ObtenerNumeroDePartidasGanadas", ReplyAction="http://tempuri.org/IServicioPartida/ObtenerNumeroDePartidasGanadasResponse")]
        System.Threading.Tasks.Task<int> ObtenerNumeroDePartidasGanadasAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/ExpulsarJugadorEnPartida")]
        void ExpulsarJugadorEnPartida(string nombreJugadorExpulsion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/ExpulsarJugadorEnPartida")]
        System.Threading.Tasks.Task ExpulsarJugadorEnPartidaAsync(string nombreJugadorExpulsion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ObtenerJugadoresConPresenciaSinConfirmarEnPar" +
            "tida", ReplyAction="http://tempuri.org/IServicioPartida/ObtenerJugadoresConPresenciaSinConfirmarEnPar" +
            "tidaResponse")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerJugadoresConPresenciaSinConfirmarEnPartida(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ObtenerJugadoresConPresenciaSinConfirmarEnPar" +
            "tida", ReplyAction="http://tempuri.org/IServicioPartida/ObtenerJugadoresConPresenciaSinConfirmarEnPar" +
            "tidaResponse")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerJugadoresConPresenciaSinConfirmarEnPartidaAsync(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/ConvertirJugadorEnAnfitrionDesdePartida")]
        void ConvertirJugadorEnAnfitrionDesdePartida(string nombreJugador, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/ConvertirJugadorEnAnfitrionDesdePartida")]
        System.Threading.Tasks.Task ConvertirJugadorEnAnfitrionDesdePartidaAsync(string nombreJugador, string codigoSala);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioPartidaCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/MostrarTableroDePartida")]
        void MostrarTableroDePartida(RompecabezasFei.ServicioRompecabezasFei.Tablero tablero);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/MostrarBloqueoDePieza")]
        void MostrarBloqueoDePieza(int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/MostrarDesbloqueoDePieza")]
        void MostrarDesbloqueoDePieza(int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/MostrarColocacionDePieza")]
        void MostrarColocacionDePieza(int numeroPieza, string nombreJugador, int puntaje, RompecabezasFei.ServicioRompecabezasFei.Posicion posicion);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/MostrarResultadosDePartida")]
        void MostrarResultadosDePartida(string nombreJugadorGanador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/HabilitarOpcionDeRegresoASala")]
        void HabilitarOpcionDeRegresoASala();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/MostrarDesconexionDeJugadorEnPartida")]
        void MostrarDesconexionDeJugadorEnPartida(string nombreJugadorDesconexion);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/MostrarMensajePartidaCancelada")]
        void MostrarMensajePartidaCancelada();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/MostrarMensajeExpulsionDePartida")]
        void MostrarMensajeExpulsionDePartida();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/HabilitarFuncionesDeAnfitrionEnPartida")]
        void HabilitarFuncionesDeAnfitrionEnPartida();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioPartidaChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioPartida, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioPartidaClient : System.ServiceModel.DuplexClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioPartida>, RompecabezasFei.ServicioRompecabezasFei.IServicioPartida {
        
        public ServicioPartidaClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServicioPartidaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServicioPartidaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioPartidaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioPartidaClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool CrearNuevaPartida(string codigoSala, RompecabezasFei.ServicioRompecabezasFei.DificultadPartida dificultad, int numeroImagen) {
            return base.Channel.CrearNuevaPartida(codigoSala, dificultad, numeroImagen);
        }
        
        public System.Threading.Tasks.Task<bool> CrearNuevaPartidaAsync(string codigoSala, RompecabezasFei.ServicioRompecabezasFei.DificultadPartida dificultad, int numeroImagen) {
            return base.Channel.CrearNuevaPartidaAsync(codigoSala, dificultad, numeroImagen);
        }
        
        public void UnirseAPartida(string codigoSala, string nombreJugador) {
            base.Channel.UnirseAPartida(codigoSala, nombreJugador);
        }
        
        public System.Threading.Tasks.Task UnirseAPartidaAsync(string codigoSala, string nombreJugador) {
            return base.Channel.UnirseAPartidaAsync(codigoSala, nombreJugador);
        }
        
        public void AbandonarPartida(string codigoSala, string nombreJugador) {
            base.Channel.AbandonarPartida(codigoSala, nombreJugador);
        }
        
        public System.Threading.Tasks.Task AbandonarPartidaAsync(string codigoSala, string nombreJugador) {
            return base.Channel.AbandonarPartidaAsync(codigoSala, nombreJugador);
        }
        
        public void CancelarPartida(string codigoSala) {
            base.Channel.CancelarPartida(codigoSala);
        }
        
        public System.Threading.Tasks.Task CancelarPartidaAsync(string codigoSala) {
            return base.Channel.CancelarPartidaAsync(codigoSala);
        }
        
        public void IniciarPartida(string codigoSala) {
            base.Channel.IniciarPartida(codigoSala);
        }
        
        public System.Threading.Tasks.Task IniciarPartidaAsync(string codigoSala) {
            return base.Channel.IniciarPartidaAsync(codigoSala);
        }
        
        public void BloquearPieza(string codigoSala, int numeroPieza, string nombreJugador) {
            base.Channel.BloquearPieza(codigoSala, numeroPieza, nombreJugador);
        }
        
        public System.Threading.Tasks.Task BloquearPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador) {
            return base.Channel.BloquearPiezaAsync(codigoSala, numeroPieza, nombreJugador);
        }
        
        public void DesbloquearPieza(string codigoSala, int numeroPieza, string nombreJugador) {
            base.Channel.DesbloquearPieza(codigoSala, numeroPieza, nombreJugador);
        }
        
        public System.Threading.Tasks.Task DesbloquearPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador) {
            return base.Channel.DesbloquearPiezaAsync(codigoSala, numeroPieza, nombreJugador);
        }
        
        public void ColocarPieza(string codigoSala, int numeroPieza, string nombreJugador, RompecabezasFei.ServicioRompecabezasFei.Posicion posicion) {
            base.Channel.ColocarPieza(codigoSala, numeroPieza, nombreJugador, posicion);
        }
        
        public System.Threading.Tasks.Task ColocarPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador, RompecabezasFei.ServicioRompecabezasFei.Posicion posicion) {
            return base.Channel.ColocarPiezaAsync(codigoSala, numeroPieza, nombreJugador, posicion);
        }
        
        public int ObtenerNumeroDePartidasJugadas(string nombreJugador) {
            return base.Channel.ObtenerNumeroDePartidasJugadas(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerNumeroDePartidasJugadasAsync(string nombreJugador) {
            return base.Channel.ObtenerNumeroDePartidasJugadasAsync(nombreJugador);
        }
        
        public int ObtenerNumeroDePartidasGanadas(string nombreJugador) {
            return base.Channel.ObtenerNumeroDePartidasGanadas(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerNumeroDePartidasGanadasAsync(string nombreJugador) {
            return base.Channel.ObtenerNumeroDePartidasGanadasAsync(nombreJugador);
        }
        
        public void ExpulsarJugadorEnPartida(string nombreJugadorExpulsion, string codigoSala) {
            base.Channel.ExpulsarJugadorEnPartida(nombreJugadorExpulsion, codigoSala);
        }
        
        public System.Threading.Tasks.Task ExpulsarJugadorEnPartidaAsync(string nombreJugadorExpulsion, string codigoSala) {
            return base.Channel.ExpulsarJugadorEnPartidaAsync(nombreJugadorExpulsion, codigoSala);
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerJugadoresConPresenciaSinConfirmarEnPartida(string codigoSala) {
            return base.Channel.ObtenerJugadoresConPresenciaSinConfirmarEnPartida(codigoSala);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerJugadoresConPresenciaSinConfirmarEnPartidaAsync(string codigoSala) {
            return base.Channel.ObtenerJugadoresConPresenciaSinConfirmarEnPartidaAsync(codigoSala);
        }
        
        public void ConvertirJugadorEnAnfitrionDesdePartida(string nombreJugador, string codigoSala) {
            base.Channel.ConvertirJugadorEnAnfitrionDesdePartida(nombreJugador, codigoSala);
        }
        
        public System.Threading.Tasks.Task ConvertirJugadorEnAnfitrionDesdePartidaAsync(string nombreJugador, string codigoSala) {
            return base.Channel.ConvertirJugadorEnAnfitrionDesdePartidaAsync(nombreJugador, codigoSala);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioSala", CallbackContract=typeof(RompecabezasFei.ServicioRompecabezasFei.IServicioSalaCallback))]
    public interface IServicioSala {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/CrearNuevaSala", ReplyAction="http://tempuri.org/IServicioSala/CrearNuevaSalaResponse")]
        bool CrearNuevaSala(string nombreAnfitrion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/CrearNuevaSala", ReplyAction="http://tempuri.org/IServicioSala/CrearNuevaSalaResponse")]
        System.Threading.Tasks.Task<bool> CrearNuevaSalaAsync(string nombreAnfitrion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/UnirseASala", ReplyAction="http://tempuri.org/IServicioSala/UnirseASalaResponse")]
        bool UnirseASala(string nombreJugador, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/UnirseASala", ReplyAction="http://tempuri.org/IServicioSala/UnirseASalaResponse")]
        System.Threading.Tasks.Task<bool> UnirseASalaAsync(string nombreJugador, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/ActivarNotificacionesDeSala")]
        void ActivarNotificacionesDeSala(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/ActivarNotificacionesDeSala")]
        System.Threading.Tasks.Task ActivarNotificacionesDeSalaAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/DesactivarNotificacionesDeSala")]
        void DesactivarNotificacionesDeSala(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/DesactivarNotificacionesDeSala")]
        System.Threading.Tasks.Task DesactivarNotificacionesDeSalaAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/AbandonarSala")]
        void AbandonarSala(string nombreJugador, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/AbandonarSala")]
        System.Threading.Tasks.Task AbandonarSalaAsync(string nombreJugador, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ObtenerJugadoresEnSala", ReplyAction="http://tempuri.org/IServicioSala/ObtenerJugadoresEnSalaResponse")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerJugadoresEnSala(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ObtenerJugadoresEnSala", ReplyAction="http://tempuri.org/IServicioSala/ObtenerJugadoresEnSalaResponse")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerJugadoresEnSalaAsync(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/EnviarMensajeDeSala")]
        void EnviarMensajeDeSala(string nombreJugador, string codigoSala, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/EnviarMensajeDeSala")]
        System.Threading.Tasks.Task EnviarMensajeDeSalaAsync(string nombreJugador, string codigoSala, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/GenerarCodigoParaNuevaSala", ReplyAction="http://tempuri.org/IServicioSala/GenerarCodigoParaNuevaSalaResponse")]
        string GenerarCodigoParaNuevaSala();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/GenerarCodigoParaNuevaSala", ReplyAction="http://tempuri.org/IServicioSala/GenerarCodigoParaNuevaSalaResponse")]
        System.Threading.Tasks.Task<string> GenerarCodigoParaNuevaSalaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ExisteSalaDisponible", ReplyAction="http://tempuri.org/IServicioSala/ExisteSalaDisponibleResponse")]
        bool ExisteSalaDisponible(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ExisteSalaDisponible", ReplyAction="http://tempuri.org/IServicioSala/ExisteSalaDisponibleResponse")]
        System.Threading.Tasks.Task<bool> ExisteSalaDisponibleAsync(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/ConvertirJugadorEnAnfitrionDesdeSala")]
        void ConvertirJugadorEnAnfitrionDesdeSala(string nombreJugador, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/ConvertirJugadorEnAnfitrionDesdeSala")]
        System.Threading.Tasks.Task ConvertirJugadorEnAnfitrionDesdeSalaAsync(string nombreJugador, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/InvitarJugador")]
        void InvitarJugador(string nombreJugador, string nombreAnfitrion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/InvitarJugador")]
        System.Threading.Tasks.Task InvitarJugadorAsync(string nombreJugador, string nombreAnfitrion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/ExpulsarJugadorEnSala")]
        void ExpulsarJugadorEnSala(string nombreJugadorExpulsion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/ExpulsarJugadorEnSala")]
        System.Threading.Tasks.Task ExpulsarJugadorEnSalaAsync(string nombreJugadorExpulsion, string codigoSala);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioSalaCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/MostrarNuevaPartida")]
        void MostrarNuevaPartida();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/MostrarMensajeDeSala")]
        void MostrarMensajeDeSala(string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/MostrarNuevoJugadorEnSala")]
        void MostrarNuevoJugadorEnSala(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador nuevoJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/MostrarMensajeExpulsionDeSala")]
        void MostrarMensajeExpulsionDeSala();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/MostrarDesconexionDeJugadorEnSala")]
        void MostrarDesconexionDeJugadorEnSala(string nombreJugadorDesconexion);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/MostrarFuncionesDeAnfitrionEnSala")]
        void MostrarFuncionesDeAnfitrionEnSala();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/HabilitarInicioDePartida")]
        void HabilitarInicioDePartida();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/DeshabilitarInicioDePartida")]
        void DeshabilitarInicioDePartida();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/MostrarAmigoDisponible")]
        void MostrarAmigoDisponible(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaAmigo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/OcultarAmigoNoDisponible")]
        void OcultarAmigoNoDisponible(string nombreAmigo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioSalaChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioSala, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioSalaClient : System.ServiceModel.DuplexClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioSala>, RompecabezasFei.ServicioRompecabezasFei.IServicioSala {
        
        public ServicioSalaClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServicioSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServicioSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioSalaClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool CrearNuevaSala(string nombreAnfitrion, string codigoSala) {
            return base.Channel.CrearNuevaSala(nombreAnfitrion, codigoSala);
        }
        
        public System.Threading.Tasks.Task<bool> CrearNuevaSalaAsync(string nombreAnfitrion, string codigoSala) {
            return base.Channel.CrearNuevaSalaAsync(nombreAnfitrion, codigoSala);
        }
        
        public bool UnirseASala(string nombreJugador, string codigoSala) {
            return base.Channel.UnirseASala(nombreJugador, codigoSala);
        }
        
        public System.Threading.Tasks.Task<bool> UnirseASalaAsync(string nombreJugador, string codigoSala) {
            return base.Channel.UnirseASalaAsync(nombreJugador, codigoSala);
        }
        
        public void ActivarNotificacionesDeSala(string nombreJugador) {
            base.Channel.ActivarNotificacionesDeSala(nombreJugador);
        }
        
        public System.Threading.Tasks.Task ActivarNotificacionesDeSalaAsync(string nombreJugador) {
            return base.Channel.ActivarNotificacionesDeSalaAsync(nombreJugador);
        }
        
        public void DesactivarNotificacionesDeSala(string nombreJugador) {
            base.Channel.DesactivarNotificacionesDeSala(nombreJugador);
        }
        
        public System.Threading.Tasks.Task DesactivarNotificacionesDeSalaAsync(string nombreJugador) {
            return base.Channel.DesactivarNotificacionesDeSalaAsync(nombreJugador);
        }
        
        public void AbandonarSala(string nombreJugador, string codigoSala) {
            base.Channel.AbandonarSala(nombreJugador, codigoSala);
        }
        
        public System.Threading.Tasks.Task AbandonarSalaAsync(string nombreJugador, string codigoSala) {
            return base.Channel.AbandonarSalaAsync(nombreJugador, codigoSala);
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerJugadoresEnSala(string codigoSala) {
            return base.Channel.ObtenerJugadoresEnSala(codigoSala);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerJugadoresEnSalaAsync(string codigoSala) {
            return base.Channel.ObtenerJugadoresEnSalaAsync(codigoSala);
        }
        
        public void EnviarMensajeDeSala(string nombreJugador, string codigoSala, string mensaje) {
            base.Channel.EnviarMensajeDeSala(nombreJugador, codigoSala, mensaje);
        }
        
        public System.Threading.Tasks.Task EnviarMensajeDeSalaAsync(string nombreJugador, string codigoSala, string mensaje) {
            return base.Channel.EnviarMensajeDeSalaAsync(nombreJugador, codigoSala, mensaje);
        }
        
        public string GenerarCodigoParaNuevaSala() {
            return base.Channel.GenerarCodigoParaNuevaSala();
        }
        
        public System.Threading.Tasks.Task<string> GenerarCodigoParaNuevaSalaAsync() {
            return base.Channel.GenerarCodigoParaNuevaSalaAsync();
        }
        
        public bool ExisteSalaDisponible(string codigoSala) {
            return base.Channel.ExisteSalaDisponible(codigoSala);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteSalaDisponibleAsync(string codigoSala) {
            return base.Channel.ExisteSalaDisponibleAsync(codigoSala);
        }
        
        public void ConvertirJugadorEnAnfitrionDesdeSala(string nombreJugador, string codigoSala) {
            base.Channel.ConvertirJugadorEnAnfitrionDesdeSala(nombreJugador, codigoSala);
        }
        
        public System.Threading.Tasks.Task ConvertirJugadorEnAnfitrionDesdeSalaAsync(string nombreJugador, string codigoSala) {
            return base.Channel.ConvertirJugadorEnAnfitrionDesdeSalaAsync(nombreJugador, codigoSala);
        }
        
        public void InvitarJugador(string nombreJugador, string nombreAnfitrion, string codigoSala) {
            base.Channel.InvitarJugador(nombreJugador, nombreAnfitrion, codigoSala);
        }
        
        public System.Threading.Tasks.Task InvitarJugadorAsync(string nombreJugador, string nombreAnfitrion, string codigoSala) {
            return base.Channel.InvitarJugadorAsync(nombreJugador, nombreAnfitrion, codigoSala);
        }
        
        public void ExpulsarJugadorEnSala(string nombreJugadorExpulsion, string codigoSala) {
            base.Channel.ExpulsarJugadorEnSala(nombreJugadorExpulsion, codigoSala);
        }
        
        public System.Threading.Tasks.Task ExpulsarJugadorEnSalaAsync(string nombreJugadorExpulsion, string codigoSala) {
            return base.Channel.ExpulsarJugadorEnSalaAsync(nombreJugadorExpulsion, codigoSala);
        }
    }
}
