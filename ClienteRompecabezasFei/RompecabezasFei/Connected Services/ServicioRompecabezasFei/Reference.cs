//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RompecabezasFei.ServicioRompecabezasFei {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CuentaJugador", Namespace="http://schemas.datacontract.org/2004/07/Logica")]
    [System.SerializableAttribute()]
    public partial class CuentaJugador : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContrasenaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CorreoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EsInvitadoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RompecabezasFei.ServicioRompecabezasFei.ConectividadJugador EstadoConectividadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdJugadorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NombreJugadorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumeroAvatarField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PuntajeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Contrasena {
            get {
                return this.ContrasenaField;
            }
            set {
                if ((object.ReferenceEquals(this.ContrasenaField, value) != true)) {
                    this.ContrasenaField = value;
                    this.RaisePropertyChanged("Contrasena");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Correo {
            get {
                return this.CorreoField;
            }
            set {
                if ((object.ReferenceEquals(this.CorreoField, value) != true)) {
                    this.CorreoField = value;
                    this.RaisePropertyChanged("Correo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EsInvitado {
            get {
                return this.EsInvitadoField;
            }
            set {
                if ((this.EsInvitadoField.Equals(value) != true)) {
                    this.EsInvitadoField = value;
                    this.RaisePropertyChanged("EsInvitado");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RompecabezasFei.ServicioRompecabezasFei.ConectividadJugador EstadoConectividad {
            get {
                return this.EstadoConectividadField;
            }
            set {
                if ((this.EstadoConectividadField.Equals(value) != true)) {
                    this.EstadoConectividadField = value;
                    this.RaisePropertyChanged("EstadoConectividad");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdJugador {
            get {
                return this.IdJugadorField;
            }
            set {
                if ((this.IdJugadorField.Equals(value) != true)) {
                    this.IdJugadorField = value;
                    this.RaisePropertyChanged("IdJugador");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NombreJugador {
            get {
                return this.NombreJugadorField;
            }
            set {
                if ((object.ReferenceEquals(this.NombreJugadorField, value) != true)) {
                    this.NombreJugadorField = value;
                    this.RaisePropertyChanged("NombreJugador");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumeroAvatar {
            get {
                return this.NumeroAvatarField;
            }
            set {
                if ((this.NumeroAvatarField.Equals(value) != true)) {
                    this.NumeroAvatarField = value;
                    this.RaisePropertyChanged("NumeroAvatar");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Puntaje {
            get {
                return this.PuntajeField;
            }
            set {
                if ((this.PuntajeField.Equals(value) != true)) {
                    this.PuntajeField = value;
                    this.RaisePropertyChanged("Puntaje");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConectividadJugador", Namespace="http://schemas.datacontract.org/2004/07/Logica")]
    public enum ConectividadJugador : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Desconectado = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Disponible = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoDisponible = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DificultadPartida", Namespace="http://schemas.datacontract.org/2004/07/Datos")]
    public enum DificultadPartida : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Facil = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Medio = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dificil = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tablero", Namespace="http://schemas.datacontract.org/2004/07/Logica")]
    [System.SerializableAttribute()]
    public partial class Tablero : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumeroImagenRompecabezasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalColumnasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalFilasField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumeroImagenRompecabezas {
            get {
                return this.NumeroImagenRompecabezasField;
            }
            set {
                if ((this.NumeroImagenRompecabezasField.Equals(value) != true)) {
                    this.NumeroImagenRompecabezasField = value;
                    this.RaisePropertyChanged("NumeroImagenRompecabezas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalColumnas {
            get {
                return this.TotalColumnasField;
            }
            set {
                if ((this.TotalColumnasField.Equals(value) != true)) {
                    this.TotalColumnasField = value;
                    this.RaisePropertyChanged("TotalColumnas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalFilas {
            get {
                return this.TotalFilasField;
            }
            set {
                if ((this.TotalFilasField.Equals(value) != true)) {
                    this.TotalFilasField = value;
                    this.RaisePropertyChanged("TotalFilas");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioAmistades", CallbackContract=typeof(RompecabezasFei.ServicioRompecabezasFei.IServicioAmistadesCallback))]
    public interface IServicioAmistades {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ObtenerJugadoresConSolicitudPendiente", ReplyAction="http://tempuri.org/IServicioAmistades/ObtenerJugadoresConSolicitudPendienteRespon" +
            "se")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerJugadoresConSolicitudPendiente(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ObtenerJugadoresConSolicitudPendiente", ReplyAction="http://tempuri.org/IServicioAmistades/ObtenerJugadoresConSolicitudPendienteRespon" +
            "se")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerJugadoresConSolicitudPendienteAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ObtenerAmigosDeJugador", ReplyAction="http://tempuri.org/IServicioAmistades/ObtenerAmigosDeJugadorResponse")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerAmigosDeJugador(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ObtenerAmigosDeJugador", ReplyAction="http://tempuri.org/IServicioAmistades/ObtenerAmigosDeJugadorResponse")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerAmigosDeJugadorAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/EnviarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/EnviarSolicitudDeAmistadResponse")]
        bool EnviarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/EnviarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/EnviarSolicitudDeAmistadResponse")]
        System.Threading.Tasks.Task<bool> EnviarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/AceptarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/AceptarSolicitudDeAmistadResponse")]
        bool AceptarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/AceptarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/AceptarSolicitudDeAmistadResponse")]
        System.Threading.Tasks.Task<bool> AceptarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/RechazarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/RechazarSolicitudDeAmistadResponse")]
        bool RechazarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/RechazarSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/RechazarSolicitudDeAmistadResponse")]
        System.Threading.Tasks.Task<bool> RechazarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ExisteSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/ExisteSolicitudDeAmistadResponse")]
        bool ExisteSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ExisteSolicitudDeAmistad", ReplyAction="http://tempuri.org/IServicioAmistades/ExisteSolicitudDeAmistadResponse")]
        System.Threading.Tasks.Task<bool> ExisteSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ExisteAmistadConJugador", ReplyAction="http://tempuri.org/IServicioAmistades/ExisteAmistadConJugadorResponse")]
        bool ExisteAmistadConJugador(string nombreJugadorA, string nombreJugadorB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/ExisteAmistadConJugador", ReplyAction="http://tempuri.org/IServicioAmistades/ExisteAmistadConJugadorResponse")]
        System.Threading.Tasks.Task<bool> ExisteAmistadConJugadorAsync(string nombreJugadorA, string nombreJugadorB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/EliminarAmistadEntreJugadores", ReplyAction="http://tempuri.org/IServicioAmistades/EliminarAmistadEntreJugadoresResponse")]
        bool EliminarAmistadEntreJugadores(string nombreJugadorA, string nombreJugadorB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioAmistades/EliminarAmistadEntreJugadores", ReplyAction="http://tempuri.org/IServicioAmistades/EliminarAmistadEntreJugadoresResponse")]
        System.Threading.Tasks.Task<bool> EliminarAmistadEntreJugadoresAsync(string nombreJugadorA, string nombreJugadorB);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/SuscribirJugadorANotificacionesDeAmistades")]
        void SuscribirJugadorANotificacionesDeAmistades(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/SuscribirJugadorANotificacionesDeAmistades")]
        System.Threading.Tasks.Task SuscribirJugadorANotificacionesDeAmistadesAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/DesuscribirJugadorDeNotificacionesDeAmistad" +
            "es")]
        void DesuscribirJugadorDeNotificacionesDeAmistades(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/DesuscribirJugadorDeNotificacionesDeAmistad" +
            "es")]
        System.Threading.Tasks.Task DesuscribirJugadorDeNotificacionesDeAmistadesAsync(string nombreJugador);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioAmistadesCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/NotificarSolicitudAmistadEnviada")]
        void NotificarSolicitudAmistadEnviada(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaNuevaSolicitud);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/NotificarSolicitudAmistadAceptada")]
        void NotificarSolicitudAmistadAceptada(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaNuevoAmigo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/NotificarAmistadEliminada")]
        void NotificarAmistadEliminada(string nombreAmigoEliminacion);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioAmistades/NotificarEstadoConectividadDeJugador")]
        void NotificarEstadoConectividadDeJugador(string nombreJugador, RompecabezasFei.ServicioRompecabezasFei.ConectividadJugador estado);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioAmistadesChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioAmistades, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioAmistadesClient : System.ServiceModel.DuplexClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioAmistades>, RompecabezasFei.ServicioRompecabezasFei.IServicioAmistades {
        
        public ServicioAmistadesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServicioAmistadesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServicioAmistadesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioAmistadesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioAmistadesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerJugadoresConSolicitudPendiente(string nombreJugador) {
            return base.Channel.ObtenerJugadoresConSolicitudPendiente(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerJugadoresConSolicitudPendienteAsync(string nombreJugador) {
            return base.Channel.ObtenerJugadoresConSolicitudPendienteAsync(nombreJugador);
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerAmigosDeJugador(string nombreJugador) {
            return base.Channel.ObtenerAmigosDeJugador(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerAmigosDeJugadorAsync(string nombreJugador) {
            return base.Channel.ObtenerAmigosDeJugadorAsync(nombreJugador);
        }
        
        public bool EnviarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.EnviarSolicitudDeAmistad(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public System.Threading.Tasks.Task<bool> EnviarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.EnviarSolicitudDeAmistadAsync(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public bool AceptarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.AceptarSolicitudDeAmistad(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public System.Threading.Tasks.Task<bool> AceptarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.AceptarSolicitudDeAmistadAsync(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public bool RechazarSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.RechazarSolicitudDeAmistad(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public System.Threading.Tasks.Task<bool> RechazarSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.RechazarSolicitudDeAmistadAsync(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public bool ExisteSolicitudDeAmistad(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.ExisteSolicitudDeAmistad(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteSolicitudDeAmistadAsync(string nombreJugadorOrigen, string nombreJugadorDestino) {
            return base.Channel.ExisteSolicitudDeAmistadAsync(nombreJugadorOrigen, nombreJugadorDestino);
        }
        
        public bool ExisteAmistadConJugador(string nombreJugadorA, string nombreJugadorB) {
            return base.Channel.ExisteAmistadConJugador(nombreJugadorA, nombreJugadorB);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteAmistadConJugadorAsync(string nombreJugadorA, string nombreJugadorB) {
            return base.Channel.ExisteAmistadConJugadorAsync(nombreJugadorA, nombreJugadorB);
        }
        
        public bool EliminarAmistadEntreJugadores(string nombreJugadorA, string nombreJugadorB) {
            return base.Channel.EliminarAmistadEntreJugadores(nombreJugadorA, nombreJugadorB);
        }
        
        public System.Threading.Tasks.Task<bool> EliminarAmistadEntreJugadoresAsync(string nombreJugadorA, string nombreJugadorB) {
            return base.Channel.EliminarAmistadEntreJugadoresAsync(nombreJugadorA, nombreJugadorB);
        }
        
        public void SuscribirJugadorANotificacionesDeAmistades(string nombreJugador) {
            base.Channel.SuscribirJugadorANotificacionesDeAmistades(nombreJugador);
        }
        
        public System.Threading.Tasks.Task SuscribirJugadorANotificacionesDeAmistadesAsync(string nombreJugador) {
            return base.Channel.SuscribirJugadorANotificacionesDeAmistadesAsync(nombreJugador);
        }
        
        public void DesuscribirJugadorDeNotificacionesDeAmistades(string nombreJugador) {
            base.Channel.DesuscribirJugadorDeNotificacionesDeAmistades(nombreJugador);
        }
        
        public System.Threading.Tasks.Task DesuscribirJugadorDeNotificacionesDeAmistadesAsync(string nombreJugador) {
            return base.Channel.DesuscribirJugadorDeNotificacionesDeAmistadesAsync(nombreJugador);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioCorreo")]
    public interface IServicioCorreo {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioCorreo/ExisteCorreoElectronico", ReplyAction="http://tempuri.org/IServicioCorreo/ExisteCorreoElectronicoResponse")]
        bool ExisteCorreoElectronico(string correoElectronico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioCorreo/ExisteCorreoElectronico", ReplyAction="http://tempuri.org/IServicioCorreo/ExisteCorreoElectronicoResponse")]
        System.Threading.Tasks.Task<bool> ExisteCorreoElectronicoAsync(string correoElectronico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioCorreo/EnviarMensajeCorreo", ReplyAction="http://tempuri.org/IServicioCorreo/EnviarMensajeCorreoResponse")]
        bool EnviarMensajeCorreo(string encabezado, string correoDestino, string asunto, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioCorreo/EnviarMensajeCorreo", ReplyAction="http://tempuri.org/IServicioCorreo/EnviarMensajeCorreoResponse")]
        System.Threading.Tasks.Task<bool> EnviarMensajeCorreoAsync(string encabezado, string correoDestino, string asunto, string mensaje);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioCorreoChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioCorreo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioCorreoClient : System.ServiceModel.ClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioCorreo>, RompecabezasFei.ServicioRompecabezasFei.IServicioCorreo {
        
        public ServicioCorreoClient() {
        }
        
        public ServicioCorreoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicioCorreoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioCorreoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioCorreoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ExisteCorreoElectronico(string correoElectronico) {
            return base.Channel.ExisteCorreoElectronico(correoElectronico);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteCorreoElectronicoAsync(string correoElectronico) {
            return base.Channel.ExisteCorreoElectronicoAsync(correoElectronico);
        }
        
        public bool EnviarMensajeCorreo(string encabezado, string correoDestino, string asunto, string mensaje) {
            return base.Channel.EnviarMensajeCorreo(encabezado, correoDestino, asunto, mensaje);
        }
        
        public System.Threading.Tasks.Task<bool> EnviarMensajeCorreoAsync(string encabezado, string correoDestino, string asunto, string mensaje) {
            return base.Channel.EnviarMensajeCorreoAsync(encabezado, correoDestino, asunto, mensaje);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioInvitaciones", CallbackContract=typeof(RompecabezasFei.ServicioRompecabezasFei.IServicioInvitacionesCallback))]
    public interface IServicioInvitaciones {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioInvitaciones/SuscribirJugadorAInvitacionesDeSala")]
        void SuscribirJugadorAInvitacionesDeSala(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioInvitaciones/SuscribirJugadorAInvitacionesDeSala")]
        System.Threading.Tasks.Task SuscribirJugadorAInvitacionesDeSalaAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioInvitaciones/DesuscribirJugadorDeInvitacionesDeSala")]
        void DesuscribirJugadorDeInvitacionesDeSala(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioInvitaciones/DesuscribirJugadorDeInvitacionesDeSala")]
        System.Threading.Tasks.Task DesuscribirJugadorDeInvitacionesDeSalaAsync(string nombreJugador);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioInvitacionesCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioInvitaciones/MostrarInvitacionDeSala", ReplyAction="http://tempuri.org/IServicioInvitaciones/MostrarInvitacionDeSalaResponse")]
        void MostrarInvitacionDeSala(string nombreJugador, string codigoSala);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioInvitacionesChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioInvitaciones, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioInvitacionesClient : System.ServiceModel.DuplexClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioInvitaciones>, RompecabezasFei.ServicioRompecabezasFei.IServicioInvitaciones {
        
        public ServicioInvitacionesClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServicioInvitacionesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServicioInvitacionesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioInvitacionesClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioInvitacionesClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SuscribirJugadorAInvitacionesDeSala(string nombreJugador) {
            base.Channel.SuscribirJugadorAInvitacionesDeSala(nombreJugador);
        }
        
        public System.Threading.Tasks.Task SuscribirJugadorAInvitacionesDeSalaAsync(string nombreJugador) {
            return base.Channel.SuscribirJugadorAInvitacionesDeSalaAsync(nombreJugador);
        }
        
        public void DesuscribirJugadorDeInvitacionesDeSala(string nombreJugador) {
            base.Channel.DesuscribirJugadorDeInvitacionesDeSala(nombreJugador);
        }
        
        public System.Threading.Tasks.Task DesuscribirJugadorDeInvitacionesDeSalaAsync(string nombreJugador) {
            return base.Channel.DesuscribirJugadorDeInvitacionesDeSalaAsync(nombreJugador);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioJugador")]
    public interface IServicioJugador {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/Registrar", ReplyAction="http://tempuri.org/IServicioJugador/RegistrarResponse")]
        bool Registrar(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/Registrar", ReplyAction="http://tempuri.org/IServicioJugador/RegistrarResponse")]
        System.Threading.Tasks.Task<bool> RegistrarAsync(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ExisteNombreJugador", ReplyAction="http://tempuri.org/IServicioJugador/ExisteNombreJugadorResponse")]
        bool ExisteNombreJugador(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ExisteNombreJugador", ReplyAction="http://tempuri.org/IServicioJugador/ExisteNombreJugadorResponse")]
        System.Threading.Tasks.Task<bool> ExisteNombreJugadorAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/IniciarSesion", ReplyAction="http://tempuri.org/IServicioJugador/IniciarSesionResponse")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador IniciarSesion(string nombreJugador, string contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/IniciarSesion", ReplyAction="http://tempuri.org/IServicioJugador/IniciarSesionResponse")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador> IniciarSesionAsync(string nombreJugador, string contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/CerrarSesion", ReplyAction="http://tempuri.org/IServicioJugador/CerrarSesionResponse")]
        bool CerrarSesion(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/CerrarSesion", ReplyAction="http://tempuri.org/IServicioJugador/CerrarSesionResponse")]
        System.Threading.Tasks.Task<bool> CerrarSesionAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ActualizarInformacion", ReplyAction="http://tempuri.org/IServicioJugador/ActualizarInformacionResponse")]
        bool ActualizarInformacion(string nombreAnterior, string nuevoNombre, int nuevoNumeroAvatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ActualizarInformacion", ReplyAction="http://tempuri.org/IServicioJugador/ActualizarInformacionResponse")]
        System.Threading.Tasks.Task<bool> ActualizarInformacionAsync(string nombreAnterior, string nuevoNombre, int nuevoNumeroAvatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ActualizarContrasena", ReplyAction="http://tempuri.org/IServicioJugador/ActualizarContrasenaResponse")]
        bool ActualizarContrasena(string correo, string contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioJugador/ActualizarContrasena", ReplyAction="http://tempuri.org/IServicioJugador/ActualizarContrasenaResponse")]
        System.Threading.Tasks.Task<bool> ActualizarContrasenaAsync(string correo, string contrasena);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioJugadorChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioJugador, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioJugadorClient : System.ServiceModel.ClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioJugador>, RompecabezasFei.ServicioRompecabezasFei.IServicioJugador {
        
        public ServicioJugadorClient() {
        }
        
        public ServicioJugadorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServicioJugadorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioJugadorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioJugadorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Registrar(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaJugador) {
            return base.Channel.Registrar(cuentaJugador);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrarAsync(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador cuentaJugador) {
            return base.Channel.RegistrarAsync(cuentaJugador);
        }
        
        public bool ExisteNombreJugador(string nombreJugador) {
            return base.Channel.ExisteNombreJugador(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteNombreJugadorAsync(string nombreJugador) {
            return base.Channel.ExisteNombreJugadorAsync(nombreJugador);
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador IniciarSesion(string nombreJugador, string contrasena) {
            return base.Channel.IniciarSesion(nombreJugador, contrasena);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador> IniciarSesionAsync(string nombreJugador, string contrasena) {
            return base.Channel.IniciarSesionAsync(nombreJugador, contrasena);
        }
        
        public bool CerrarSesion(string nombreJugador) {
            return base.Channel.CerrarSesion(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<bool> CerrarSesionAsync(string nombreJugador) {
            return base.Channel.CerrarSesionAsync(nombreJugador);
        }
        
        public bool ActualizarInformacion(string nombreAnterior, string nuevoNombre, int nuevoNumeroAvatar) {
            return base.Channel.ActualizarInformacion(nombreAnterior, nuevoNombre, nuevoNumeroAvatar);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarInformacionAsync(string nombreAnterior, string nuevoNombre, int nuevoNumeroAvatar) {
            return base.Channel.ActualizarInformacionAsync(nombreAnterior, nuevoNombre, nuevoNumeroAvatar);
        }
        
        public bool ActualizarContrasena(string correo, string contrasena) {
            return base.Channel.ActualizarContrasena(correo, contrasena);
        }
        
        public System.Threading.Tasks.Task<bool> ActualizarContrasenaAsync(string correo, string contrasena) {
            return base.Channel.ActualizarContrasenaAsync(correo, contrasena);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioPartida", CallbackContract=typeof(RompecabezasFei.ServicioRompecabezasFei.IServicioPartidaCallback))]
    public interface IServicioPartida {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/CrearNuevaPartida", ReplyAction="http://tempuri.org/IServicioPartida/CrearNuevaPartidaResponse")]
        bool CrearNuevaPartida(string codigoSala, RompecabezasFei.ServicioRompecabezasFei.DificultadPartida dificultad, int numeroImagen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/CrearNuevaPartida", ReplyAction="http://tempuri.org/IServicioPartida/CrearNuevaPartidaResponse")]
        System.Threading.Tasks.Task<bool> CrearNuevaPartidaAsync(string codigoSala, RompecabezasFei.ServicioRompecabezasFei.DificultadPartida dificultad, int numeroImagen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ConectarJugadorAPartida", ReplyAction="http://tempuri.org/IServicioPartida/ConectarJugadorAPartidaResponse")]
        void ConectarJugadorAPartida(string codigoSala, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ConectarJugadorAPartida", ReplyAction="http://tempuri.org/IServicioPartida/ConectarJugadorAPartidaResponse")]
        System.Threading.Tasks.Task ConectarJugadorAPartidaAsync(string codigoSala, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/DesconectarJugadorDePartida", ReplyAction="http://tempuri.org/IServicioPartida/DesconectarJugadorDePartidaResponse")]
        void DesconectarJugadorDePartida(string codigoSala, string nombreJugadorDesconexion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/DesconectarJugadorDePartida", ReplyAction="http://tempuri.org/IServicioPartida/DesconectarJugadorDePartidaResponse")]
        System.Threading.Tasks.Task DesconectarJugadorDePartidaAsync(string codigoSala, string nombreJugadorDesconexion);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/IniciarPartida")]
        void IniciarPartida(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/IniciarPartida")]
        System.Threading.Tasks.Task IniciarPartidaAsync(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/BloquearPieza")]
        void BloquearPieza(string codigoSala, int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/BloquearPieza")]
        System.Threading.Tasks.Task BloquearPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/DesbloquearPieza")]
        void DesbloquearPieza(string codigoSala, int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/DesbloquearPieza")]
        System.Threading.Tasks.Task DesbloquearPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/ColocarPieza")]
        void ColocarPieza(string codigoSala, int numeroPieza, string nombreJugador, double posicionX, double posicionY);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/ColocarPieza")]
        System.Threading.Tasks.Task ColocarPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador, double posicionX, double posicionY);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ObtenerNumeroPartidasJugadas", ReplyAction="http://tempuri.org/IServicioPartida/ObtenerNumeroPartidasJugadasResponse")]
        int ObtenerNumeroPartidasJugadas(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ObtenerNumeroPartidasJugadas", ReplyAction="http://tempuri.org/IServicioPartida/ObtenerNumeroPartidasJugadasResponse")]
        System.Threading.Tasks.Task<int> ObtenerNumeroPartidasJugadasAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ObtenerNumeroPartidasGanadas", ReplyAction="http://tempuri.org/IServicioPartida/ObtenerNumeroPartidasGanadasResponse")]
        int ObtenerNumeroPartidasGanadas(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioPartida/ObtenerNumeroPartidasGanadas", ReplyAction="http://tempuri.org/IServicioPartida/ObtenerNumeroPartidasGanadasResponse")]
        System.Threading.Tasks.Task<int> ObtenerNumeroPartidasGanadasAsync(string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/ExpulsarAJugadorDePartida")]
        void ExpulsarAJugadorDePartida(string nombreJugadorExpulsion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/ExpulsarAJugadorDePartida")]
        System.Threading.Tasks.Task ExpulsarAJugadorDePartidaAsync(string nombreJugadorExpulsion, string codigoSala);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioPartidaCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/NotificarInicioDePartida")]
        void NotificarInicioDePartida(RompecabezasFei.ServicioRompecabezasFei.Tablero tablero);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/NotificarBloqueoDePieza")]
        void NotificarBloqueoDePieza(int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/NotificarDesbloqueoDePieza")]
        void NotificarDesbloqueoDePieza(int numeroPieza, string nombreJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/NotificarColocacionDePieza")]
        void NotificarColocacionDePieza(int numeroPieza, string nombreJugador, int puntaje, double posicionX, double posicionY);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/NotificarFinDePartida")]
        void NotificarFinDePartida();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioPartida/NotificarJugadorDesconectadoDePartida")]
        void NotificarJugadorDesconectadoDePartida(string nombreJugadorDesconectado);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioPartidaChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioPartida, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioPartidaClient : System.ServiceModel.DuplexClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioPartida>, RompecabezasFei.ServicioRompecabezasFei.IServicioPartida {
        
        public ServicioPartidaClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServicioPartidaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServicioPartidaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioPartidaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioPartidaClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool CrearNuevaPartida(string codigoSala, RompecabezasFei.ServicioRompecabezasFei.DificultadPartida dificultad, int numeroImagen) {
            return base.Channel.CrearNuevaPartida(codigoSala, dificultad, numeroImagen);
        }
        
        public System.Threading.Tasks.Task<bool> CrearNuevaPartidaAsync(string codigoSala, RompecabezasFei.ServicioRompecabezasFei.DificultadPartida dificultad, int numeroImagen) {
            return base.Channel.CrearNuevaPartidaAsync(codigoSala, dificultad, numeroImagen);
        }
        
        public void ConectarJugadorAPartida(string codigoSala, string nombreJugador) {
            base.Channel.ConectarJugadorAPartida(codigoSala, nombreJugador);
        }
        
        public System.Threading.Tasks.Task ConectarJugadorAPartidaAsync(string codigoSala, string nombreJugador) {
            return base.Channel.ConectarJugadorAPartidaAsync(codigoSala, nombreJugador);
        }
        
        public void DesconectarJugadorDePartida(string codigoSala, string nombreJugadorDesconexion) {
            base.Channel.DesconectarJugadorDePartida(codigoSala, nombreJugadorDesconexion);
        }
        
        public System.Threading.Tasks.Task DesconectarJugadorDePartidaAsync(string codigoSala, string nombreJugadorDesconexion) {
            return base.Channel.DesconectarJugadorDePartidaAsync(codigoSala, nombreJugadorDesconexion);
        }
        
        public void IniciarPartida(string codigoSala) {
            base.Channel.IniciarPartida(codigoSala);
        }
        
        public System.Threading.Tasks.Task IniciarPartidaAsync(string codigoSala) {
            return base.Channel.IniciarPartidaAsync(codigoSala);
        }
        
        public void BloquearPieza(string codigoSala, int numeroPieza, string nombreJugador) {
            base.Channel.BloquearPieza(codigoSala, numeroPieza, nombreJugador);
        }
        
        public System.Threading.Tasks.Task BloquearPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador) {
            return base.Channel.BloquearPiezaAsync(codigoSala, numeroPieza, nombreJugador);
        }
        
        public void DesbloquearPieza(string codigoSala, int numeroPieza, string nombreJugador) {
            base.Channel.DesbloquearPieza(codigoSala, numeroPieza, nombreJugador);
        }
        
        public System.Threading.Tasks.Task DesbloquearPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador) {
            return base.Channel.DesbloquearPiezaAsync(codigoSala, numeroPieza, nombreJugador);
        }
        
        public void ColocarPieza(string codigoSala, int numeroPieza, string nombreJugador, double posicionX, double posicionY) {
            base.Channel.ColocarPieza(codigoSala, numeroPieza, nombreJugador, posicionX, posicionY);
        }
        
        public System.Threading.Tasks.Task ColocarPiezaAsync(string codigoSala, int numeroPieza, string nombreJugador, double posicionX, double posicionY) {
            return base.Channel.ColocarPiezaAsync(codigoSala, numeroPieza, nombreJugador, posicionX, posicionY);
        }
        
        public int ObtenerNumeroPartidasJugadas(string nombreJugador) {
            return base.Channel.ObtenerNumeroPartidasJugadas(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerNumeroPartidasJugadasAsync(string nombreJugador) {
            return base.Channel.ObtenerNumeroPartidasJugadasAsync(nombreJugador);
        }
        
        public int ObtenerNumeroPartidasGanadas(string nombreJugador) {
            return base.Channel.ObtenerNumeroPartidasGanadas(nombreJugador);
        }
        
        public System.Threading.Tasks.Task<int> ObtenerNumeroPartidasGanadasAsync(string nombreJugador) {
            return base.Channel.ObtenerNumeroPartidasGanadasAsync(nombreJugador);
        }
        
        public void ExpulsarAJugadorDePartida(string nombreJugadorExpulsion, string codigoSala) {
            base.Channel.ExpulsarAJugadorDePartida(nombreJugadorExpulsion, codigoSala);
        }
        
        public System.Threading.Tasks.Task ExpulsarAJugadorDePartidaAsync(string nombreJugadorExpulsion, string codigoSala) {
            return base.Channel.ExpulsarAJugadorDePartidaAsync(nombreJugadorExpulsion, codigoSala);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicioRompecabezasFei.IServicioSala", CallbackContract=typeof(RompecabezasFei.ServicioRompecabezasFei.IServicioSalaCallback))]
    public interface IServicioSala {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/CrearNuevaSala", ReplyAction="http://tempuri.org/IServicioSala/CrearNuevaSalaResponse")]
        bool CrearNuevaSala(string nombreAnfitrion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/CrearNuevaSala", ReplyAction="http://tempuri.org/IServicioSala/CrearNuevaSalaResponse")]
        System.Threading.Tasks.Task<bool> CrearNuevaSalaAsync(string nombreAnfitrion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ConectarJugadorASala", ReplyAction="http://tempuri.org/IServicioSala/ConectarJugadorASalaResponse")]
        void ConectarJugadorASala(string nombreNuevoJugador, string codigoSala, string mensajeBienvenida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ConectarJugadorASala", ReplyAction="http://tempuri.org/IServicioSala/ConectarJugadorASalaResponse")]
        System.Threading.Tasks.Task ConectarJugadorASalaAsync(string nombreNuevoJugador, string codigoSala, string mensajeBienvenida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/RefrescarSesionEnSala", ReplyAction="http://tempuri.org/IServicioSala/RefrescarSesionEnSalaResponse")]
        void RefrescarSesionEnSala(string nombreJugador, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/RefrescarSesionEnSala", ReplyAction="http://tempuri.org/IServicioSala/RefrescarSesionEnSalaResponse")]
        System.Threading.Tasks.Task RefrescarSesionEnSalaAsync(string nombreJugador, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/DesconectarJugadorDeSala", ReplyAction="http://tempuri.org/IServicioSala/DesconectarJugadorDeSalaResponse")]
        void DesconectarJugadorDeSala(string nombreJugadorDesconexion, string codigoSala, string mensajeDespedida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/DesconectarJugadorDeSala", ReplyAction="http://tempuri.org/IServicioSala/DesconectarJugadorDeSalaResponse")]
        System.Threading.Tasks.Task DesconectarJugadorDeSalaAsync(string nombreJugadorDesconexion, string codigoSala, string mensajeDespedida);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ObtenerJugadoresConectadosEnSala", ReplyAction="http://tempuri.org/IServicioSala/ObtenerJugadoresConectadosEnSalaResponse")]
        RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerJugadoresConectadosEnSala(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ObtenerJugadoresConectadosEnSala", ReplyAction="http://tempuri.org/IServicioSala/ObtenerJugadoresConectadosEnSalaResponse")]
        System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerJugadoresConectadosEnSalaAsync(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/EnviarMensajeDeSala")]
        void EnviarMensajeDeSala(string nombreJugador, string codigoSala, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/EnviarMensajeDeSala")]
        System.Threading.Tasks.Task EnviarMensajeDeSalaAsync(string nombreJugador, string codigoSala, string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/GenerarCodigoParaNuevaSala", ReplyAction="http://tempuri.org/IServicioSala/GenerarCodigoParaNuevaSalaResponse")]
        string GenerarCodigoParaNuevaSala();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/GenerarCodigoParaNuevaSala", ReplyAction="http://tempuri.org/IServicioSala/GenerarCodigoParaNuevaSalaResponse")]
        System.Threading.Tasks.Task<string> GenerarCodigoParaNuevaSalaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ExisteSalaDisponible", ReplyAction="http://tempuri.org/IServicioSala/ExisteSalaDisponibleResponse")]
        bool ExisteSalaDisponible(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ExisteSalaDisponible", ReplyAction="http://tempuri.org/IServicioSala/ExisteSalaDisponibleResponse")]
        System.Threading.Tasks.Task<bool> ExisteSalaDisponibleAsync(string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ConvertirAJugadorEnAnfitrionDeSala", ReplyAction="http://tempuri.org/IServicioSala/ConvertirAJugadorEnAnfitrionDeSalaResponse")]
        bool ConvertirAJugadorEnAnfitrionDeSala(string nombreAntiguoAnfitrion, string nombreNuevoAnfitrion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServicioSala/ConvertirAJugadorEnAnfitrionDeSala", ReplyAction="http://tempuri.org/IServicioSala/ConvertirAJugadorEnAnfitrionDeSalaResponse")]
        System.Threading.Tasks.Task<bool> ConvertirAJugadorEnAnfitrionDeSalaAsync(string nombreAntiguoAnfitrion, string nombreNuevoAnfitrion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/InvitarAJugadorASala")]
        void InvitarAJugadorASala(string nombreJugador, string nombreAnfitrion, string codigoSala);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/InvitarAJugadorASala")]
        System.Threading.Tasks.Task InvitarAJugadorASalaAsync(string nombreJugador, string nombreAnfitrion, string codigoSala);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioSalaCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/NotificarCreacionDePartida")]
        void NotificarCreacionDePartida();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/MostrarMensajeDeSala")]
        void MostrarMensajeDeSala(string mensaje);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/NotificarNuevoJugadorConectadoEnSala")]
        void NotificarNuevoJugadorConectadoEnSala(RompecabezasFei.ServicioRompecabezasFei.CuentaJugador nuevoJugador);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/NotificarJugadorDesconectadoDeSala")]
        void NotificarJugadorDesconectadoDeSala(string nombreJugadorDesconectado);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServicioSala/MostrarFuncionesDeAnfitrion")]
        void MostrarFuncionesDeAnfitrion();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServicioSalaChannel : RompecabezasFei.ServicioRompecabezasFei.IServicioSala, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServicioSalaClient : System.ServiceModel.DuplexClientBase<RompecabezasFei.ServicioRompecabezasFei.IServicioSala>, RompecabezasFei.ServicioRompecabezasFei.IServicioSala {
        
        public ServicioSalaClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServicioSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServicioSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServicioSalaClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool CrearNuevaSala(string nombreAnfitrion, string codigoSala) {
            return base.Channel.CrearNuevaSala(nombreAnfitrion, codigoSala);
        }
        
        public System.Threading.Tasks.Task<bool> CrearNuevaSalaAsync(string nombreAnfitrion, string codigoSala) {
            return base.Channel.CrearNuevaSalaAsync(nombreAnfitrion, codigoSala);
        }
        
        public void ConectarJugadorASala(string nombreNuevoJugador, string codigoSala, string mensajeBienvenida) {
            base.Channel.ConectarJugadorASala(nombreNuevoJugador, codigoSala, mensajeBienvenida);
        }
        
        public System.Threading.Tasks.Task ConectarJugadorASalaAsync(string nombreNuevoJugador, string codigoSala, string mensajeBienvenida) {
            return base.Channel.ConectarJugadorASalaAsync(nombreNuevoJugador, codigoSala, mensajeBienvenida);
        }
        
        public void RefrescarSesionEnSala(string nombreJugador, string codigoSala) {
            base.Channel.RefrescarSesionEnSala(nombreJugador, codigoSala);
        }
        
        public System.Threading.Tasks.Task RefrescarSesionEnSalaAsync(string nombreJugador, string codigoSala) {
            return base.Channel.RefrescarSesionEnSalaAsync(nombreJugador, codigoSala);
        }
        
        public void DesconectarJugadorDeSala(string nombreJugadorDesconexion, string codigoSala, string mensajeDespedida) {
            base.Channel.DesconectarJugadorDeSala(nombreJugadorDesconexion, codigoSala, mensajeDespedida);
        }
        
        public System.Threading.Tasks.Task DesconectarJugadorDeSalaAsync(string nombreJugadorDesconexion, string codigoSala, string mensajeDespedida) {
            return base.Channel.DesconectarJugadorDeSalaAsync(nombreJugadorDesconexion, codigoSala, mensajeDespedida);
        }
        
        public RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[] ObtenerJugadoresConectadosEnSala(string codigoSala) {
            return base.Channel.ObtenerJugadoresConectadosEnSala(codigoSala);
        }
        
        public System.Threading.Tasks.Task<RompecabezasFei.ServicioRompecabezasFei.CuentaJugador[]> ObtenerJugadoresConectadosEnSalaAsync(string codigoSala) {
            return base.Channel.ObtenerJugadoresConectadosEnSalaAsync(codigoSala);
        }
        
        public void EnviarMensajeDeSala(string nombreJugador, string codigoSala, string mensaje) {
            base.Channel.EnviarMensajeDeSala(nombreJugador, codigoSala, mensaje);
        }
        
        public System.Threading.Tasks.Task EnviarMensajeDeSalaAsync(string nombreJugador, string codigoSala, string mensaje) {
            return base.Channel.EnviarMensajeDeSalaAsync(nombreJugador, codigoSala, mensaje);
        }
        
        public string GenerarCodigoParaNuevaSala() {
            return base.Channel.GenerarCodigoParaNuevaSala();
        }
        
        public System.Threading.Tasks.Task<string> GenerarCodigoParaNuevaSalaAsync() {
            return base.Channel.GenerarCodigoParaNuevaSalaAsync();
        }
        
        public bool ExisteSalaDisponible(string codigoSala) {
            return base.Channel.ExisteSalaDisponible(codigoSala);
        }
        
        public System.Threading.Tasks.Task<bool> ExisteSalaDisponibleAsync(string codigoSala) {
            return base.Channel.ExisteSalaDisponibleAsync(codigoSala);
        }
        
        public bool ConvertirAJugadorEnAnfitrionDeSala(string nombreAntiguoAnfitrion, string nombreNuevoAnfitrion, string codigoSala) {
            return base.Channel.ConvertirAJugadorEnAnfitrionDeSala(nombreAntiguoAnfitrion, nombreNuevoAnfitrion, codigoSala);
        }
        
        public System.Threading.Tasks.Task<bool> ConvertirAJugadorEnAnfitrionDeSalaAsync(string nombreAntiguoAnfitrion, string nombreNuevoAnfitrion, string codigoSala) {
            return base.Channel.ConvertirAJugadorEnAnfitrionDeSalaAsync(nombreAntiguoAnfitrion, nombreNuevoAnfitrion, codigoSala);
        }
        
        public void InvitarAJugadorASala(string nombreJugador, string nombreAnfitrion, string codigoSala) {
            base.Channel.InvitarAJugadorASala(nombreJugador, nombreAnfitrion, codigoSala);
        }
        
        public System.Threading.Tasks.Task InvitarAJugadorASalaAsync(string nombreJugador, string nombreAnfitrion, string codigoSala) {
            return base.Channel.InvitarAJugadorASalaAsync(nombreJugador, nombreAnfitrion, codigoSala);
        }
    }
}
