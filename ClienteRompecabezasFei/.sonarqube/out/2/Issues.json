{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Compilador de Microsoft (R) Visual C#",
        "version": "4.8.0.0",
        "fileVersion": "4.8.0-7.23558.1 (e0917286)",
        "semanticVersion": "4.8.0",
        "language": "es-MX"
      },
      "results": [
        {
          "ruleId": "S1118",
          "level": "warning",
          "message": "Add a 'protected' constructor or the 'static' keyword to the class declaration.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/samue/OneDrive/Escritorio/RompecabezasFEI/ClienteRompecabezasFei/Seguridad/EncriptadorContrasena.cs",
                "region": {
                  "startLine": 7,
                  "startColumn": 18,
                  "endLine": 7,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1118",
          "level": "warning",
          "message": "Add a 'protected' constructor or the 'static' keyword to the class declaration.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/samue/OneDrive/Escritorio/RompecabezasFEI/ClienteRompecabezasFei/Seguridad/ValidadorDatos.cs",
                "region": {
                  "startLine": 6,
                  "startColumn": 18,
                  "endLine": 6,
                  "endColumn": 32
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1125",
          "level": "warning",
          "message": "Remove the unnecessary Boolean literal(s).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/samue/OneDrive/Escritorio/RompecabezasFEI/ClienteRompecabezasFei/Seguridad/ValidadorDatos.cs",
                "region": {
                  "startLine": 70,
                  "startColumn": 85,
                  "endLine": 70,
                  "endColumn": 93
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1125",
          "level": "warning",
          "message": "Remove the unnecessary Boolean literal(s).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/samue/OneDrive/Escritorio/RompecabezasFEI/ClienteRompecabezasFei/Seguridad/ValidadorDatos.cs",
                "region": {
                  "startLine": 57,
                  "startColumn": 85,
                  "endLine": 57,
                  "endColumn": 93
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1125",
          "level": "warning",
          "message": "Remove the unnecessary Boolean literal(s).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/samue/OneDrive/Escritorio/RompecabezasFEI/ClienteRompecabezasFei/Seguridad/ValidadorDatos.cs",
                "region": {
                  "startLine": 83,
                  "startColumn": 85,
                  "endLine": 83,
                  "endColumn": 93
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "S1118": {
          "id": "S1118",
          "shortDescription": "Utility classes should not have public constructors",
          "fullDescription": "Whenever there are portions of code that are duplicated and do not depend on the state of their container class, they can be centralized inside a \"utility class\". A utility class is a class that only has static members, hence it should not be instantiated.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-1118",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        },
        "S1125": {
          "id": "S1125",
          "shortDescription": "Boolean literals should not be redundant",
          "fullDescription": "A boolean literal can be represented in two different ways: true or false. They can be combined with logical operators (!, &&, ||, ==, !=) to produce logical expressions that represent truth values. However, comparing a boolean literal to a variable or expression that evaluates to a boolean value is unnecessary and can make the code harder to read and understand. The more complex a boolean expression is, the harder it will be for developers to understand its meaning and expected behavior, and it will favour the introduction of new bugs.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-1125",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "TestSourceScope",
              "SonarWay"
            ]
          }
        }
      }
    }
  ]
}